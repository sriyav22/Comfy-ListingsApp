{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shriya22/Desktop/Semester3/Web Design/Project/final-project-incredibles/webapp/src/App/Components/Listings/ViewFavorites.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport NavbarComponent from '../Navbar/navbar';\nimport Card from './Card';\nimport { fetchListings } from \"../../Store/actions/listingActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../Store/actions/authActions\";\nimport FooterComponent from '../Footer/footer';\n\nconst Listings = () => {\n  _s();\n\n  const listings = useSelector(state => state.listings);\n};\n\n_s(Listings, \"6MXs7rVl0ZtPmAjfgoWKl/lz3Xk=\", false, function () {\n  return [useSelector];\n});\n\n_c = Listings;\n\nclass ViewFavoritesComponent extends React.Component {\n  // This function is called everytime there is some update in the component. In this case, if the user object's length \n  // is 0 then homepage componet is called.\n  componentDidUpdate() {\n    if (Object.keys(this.props.auth.user).length === 0) {\n      window.location.href = \"/\";\n    }\n  } //This function is called on load and fetches all the listings in the db.\n\n\n  componentDidMount() {\n    this.props.fetchListings();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavbarComponent, {\n        history: this.props.history\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: // This section checks if there are listings and then maps each listing to the room object and id to index\n          // and also the room should have a favorite value which should be true and the user favorited should be \n          // same as the logged in user.\n          this.props.listings && this.props.listings.map((room, index) => {\n            if (room.Favorite && room.Favorite.isFavorite == true && this.props.auth.user.id === room.Favorite.byUser) {\n              return /*#__PURE__*/_jsxDEV(Card, {\n                room: room\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 49\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(FooterComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }, this);\n  }\n\n}\n\nViewFavoritesComponent.propTypes = {\n  fetchListings: PropTypes.func.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  listings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  listings: state.listings\n});\n\nexport default connect(mapStateToProps, {\n  fetchListings,\n  logoutUser\n})(ViewFavoritesComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"Listings\");","map":{"version":3,"sources":["/Users/shriya22/Desktop/Semester3/Web Design/Project/final-project-incredibles/webapp/src/App/Components/Listings/ViewFavorites.js"],"names":["React","useSelector","NavbarComponent","Card","fetchListings","PropTypes","connect","logoutUser","FooterComponent","Listings","listings","state","ViewFavoritesComponent","Component","componentDidUpdate","Object","keys","props","auth","user","length","window","location","href","componentDidMount","render","history","map","room","index","Favorite","isFavorite","id","byUser","propTypes","func","isRequired","object","mapStateToProps"],"mappings":";;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,iCAA3B;AACA,OAAOC,eAAP,MAA4B,kBAA5B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAMC,QAAQ,GAAGT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACD,QAAlB,CAA5B;AACH,CAFD;;GAAMD,Q;UACeR,W;;;KADfQ,Q;;AAIE,MAAMG,sBAAN,SAAqCZ,KAAK,CAACa,SAA3C,CAAqD;AAEjD;AACA;AACEC,EAAAA,kBAAkB,GAAE;AAClB,QAAGC,MAAM,CAACC,IAAP,CAAY,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAA5B,EAAkCC,MAAlC,KAA6C,CAAhD,EAAkD;AAC9CC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;AACJ,GARgD,CAUjD;;;AACAC,EAAAA,iBAAiB,GAAG;AAChB,SAAKP,KAAL,CAAWb,aAAX;AACH;;AAEDqB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BAEI,QAAC,eAAD;AAAiB,QAAA,OAAO,EAAE,KAAKR,KAAL,CAAWS;AAArC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI;AAAK,QAAA,SAAS,EAAG,gBAAjB;AAAA,+BACI;AAAK,UAAA,SAAS,EAAG,KAAjB;AAAA,oBAEI;AACA;AACA;AACA,eAAKT,KAAL,CAAWP,QAAX,IACA,KAAKO,KAAL,CAAWP,QAAX,CAAoBiB,GAApB,CAAwB,CAACC,IAAD,EAAQC,KAAR,KAAkB;AACtC,gBAAGD,IAAI,CAACE,QAAL,IAAiBF,IAAI,CAACE,QAAL,CAAcC,UAAd,IAA4B,IAA7C,IAAqD,KAAKd,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,CAAqBa,EAArB,KAA4BJ,IAAI,CAACE,QAAL,CAAcG,MAAlG,EAA0G;AACtG,kCAAQ,QAAC,IAAD;AAAM,gBAAA,IAAI,EAAIL;AAAd;AAAA;AAAA;AAAA;AAAA,sBAAR;AACH;AACJ,WAJD;AANJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cALJ,eAmBI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAuBH;;AAvCgD;;AA0CrDhB,sBAAsB,CAACsB,SAAvB,GAAmC;AAC/B9B,EAAAA,aAAa,EAAEC,SAAS,CAAC8B,IAAV,CAAeC,UADC;AAE/B7B,EAAAA,UAAU,EAAEF,SAAS,CAAC8B,IAAV,CAAeC,UAFI;AAG/BlB,EAAAA,IAAI,EAAEb,SAAS,CAACgC,MAAV,CAAiBD,UAHQ;AAI/B1B,EAAAA,QAAQ,EAAGL,SAAS,CAACgC,MAAV,CAAiBD;AAJG,CAAnC;;AAOA,MAAME,eAAe,GAAG3B,KAAK,KAAK;AAC9BO,EAAAA,IAAI,EAAEP,KAAK,CAACO,IADkB;AAE9BR,EAAAA,QAAQ,EAAGC,KAAK,CAACD;AAFa,CAAL,CAA7B;;AAIA,eAAeJ,OAAO,CAClBgC,eADkB,EAElB;AAAElC,EAAAA,aAAF;AAAkBG,EAAAA;AAAlB,CAFkB,CAAP,CAGbK,sBAHa,CAAf","sourcesContent":["\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport NavbarComponent from '../Navbar/navbar';\nimport Card from './Card';\nimport { fetchListings } from \"../../Store/actions/listingActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../Store/actions/authActions\";\nimport FooterComponent from '../Footer/footer'\n\nconst Listings = () => {\n    const listings = useSelector((state) => state.listings);\n}\n\n        class ViewFavoritesComponent extends React.Component {\n             \n            // This function is called everytime there is some update in the component. In this case, if the user object's length \n            // is 0 then homepage componet is called.\n              componentDidUpdate(){\n                if(Object.keys(this.props.auth.user).length === 0){\n                    window.location.href = \"/\"\n                }\n            }\n            \n            //This function is called on load and fetches all the listings in the db.\n            componentDidMount() {\n                this.props.fetchListings()    \n            }\n              \n            render() {\n                return(\n                    <div>\n                        {/* The navbar component is called */}\n                        <NavbarComponent history={this.props.history}/>\n\n                        {/* Aligning the data in the screen in a grid format */}\n                        <div className = \"container mt-5\">\n                            <div className = \"row\">\n                            { \n                                // This section checks if there are listings and then maps each listing to the room object and id to index\n                                // and also the room should have a favorite value which should be true and the user favorited should be \n                                // same as the logged in user.\n                                this.props.listings && \n                                this.props.listings.map((room , index) => {\n                                    if(room.Favorite && room.Favorite.isFavorite == true && this.props.auth.user.id === room.Favorite.byUser) {\n                                        return (<Card room = {room} />)\n                                    }    \n                                })}    \n                            </div>\n                        </div>\n                        <FooterComponent />\n                    </div>          \n                );\n            }\n        }                                                                        \n\n        ViewFavoritesComponent.propTypes = {\n            fetchListings: PropTypes.func.isRequired,\n            logoutUser: PropTypes.func.isRequired,\n            auth: PropTypes.object.isRequired,\n            listings : PropTypes.object.isRequired,\n            \n        };\n        const mapStateToProps = state => ({\n            auth: state.auth,\n            listings : state.listings\n        });\n        export default connect(\n            mapStateToProps,\n            { fetchListings , logoutUser}\n        )(ViewFavoritesComponent);\n\n"]},"metadata":{},"sourceType":"module"}