{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\nimport store from \"../store\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"http://localhost:5000/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: ((err || {}).response || {}).data || 'Error unexpected'\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http://localhost:5000/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: ((err || {}).response || {}).data || 'Error unexpected'\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  console.log(\"logoutaction\"); // Remove token from local storage\n\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({})); // store.remove('loggedIn');\n};","map":{"version":3,"sources":["/Users/shriya22/Desktop/Semester3/Web Design/Project/final-project-incredibles/webapp/src/App/Store/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","store","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","console","log","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SACIC,UADJ,EAEIC,gBAFJ,EAGIC,YAHJ,QAIS,SAJT;AAKA,OAAOC,KAAP,MAAkB,UAAlB,C,CAEC;;AACD,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DV,EAAAA,KAAK,CACFW,IADH,CACQ,sCADR,EACgDH,QADhD,EAEGI,IAFH,CAEQC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFf,EAEuC;AAFvC,GAGGC,KAHH,CAGSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAE,CAAC,CAACF,GAAG,IAAE,EAAN,EAAUG,QAAV,IAAoB,EAArB,EAAyBC,IAAzB,IAAiC;AAFnC,GAAD,CAJZ;AASD,CAVI,C,CAYP;;AACA,OAAO,MAAMC,SAAS,GAAGb,QAAQ,IAAIE,QAAQ,IAAI;AAC7CV,EAAAA,KAAK,CACFW,IADH,CACQ,6BADR,EACuCH,QADvC,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACnB;AACA;AACA,UAAM;AAAES,MAAAA;AAAF,QAAYT,GAAG,CAACO,IAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJmB,CAMnB;;AACArB,IAAAA,YAAY,CAACqB,KAAD,CAAZ,CAPmB,CAQnB;;AACA,UAAMG,OAAO,GAAGvB,UAAU,CAACoB,KAAD,CAA1B,CATmB,CAUnB;;AACAZ,IAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACC,GAdG,EAeHV,KAfG,CAeGC,GAAG,IACVN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAE,CAAC,CAACF,GAAG,IAAE,EAAN,EAAUG,QAAV,IAAoB,EAArB,EAAyBC,IAAzB,IAAiC;AAFnC,GAAD,CAhBJ;AAqBH,CAtBM,C,CAwBP;;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACrC,SAAO;AACLR,IAAAA,IAAI,EAAEb,gBADD;AAELc,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALI,C,CAML;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLV,IAAAA,IAAI,EAAEZ;AADD,GAAP;AAGD,CAJM,C,CAKP;;AACA,OAAO,MAAMuB,UAAU,GAAG,MAAMlB,QAAQ,IAAI;AAC1CmB,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAD0C,CAE1C;;AACAP,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB,EAH0C,CAI1C;;AACA9B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAL0C,CAM1C;;AACAS,EAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR,CAP0C,CAQ1C;AACD,CATM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport {\n    GET_ERRORS,\n    SET_CURRENT_USER,\n    USER_LOADING\n  } from \"./types\";\nimport store from \"../store\";\n\n // Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n      .post(\"http://localhost:5000/users/register\", userData)\n      .then(res => history.push(\"/login\")) // re-direct to login on successful register\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: ((err||{}).response||{}).data || 'Error unexpected'\n        })\n      );\n  }; \n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n    axios\n      .post(\"http://localhost:5000/login\", userData)\n      .then(res => {\n// Save to localStorage\n// Set token to localStorage\nconst { token } = res.data;\nlocalStorage.setItem(\"jwtToken\", token);\n\n// Set token to Auth header\nsetAuthToken(token);\n// Decode token to get user data\nconst decoded = jwt_decode(token);\n// Set current user\ndispatch(setCurrentUser(decoded));\n})\n.catch(err =>\ndispatch({\n  type: GET_ERRORS,\n  payload: ((err||{}).response||{}).data || 'Error unexpected'\n})\n);\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n      type: SET_CURRENT_USER,\n      payload: decoded\n    };\n  };\n  // User loading\n  export const setUserLoading = () => {\n    return {\n      type: USER_LOADING\n    };\n  };\n  // Log user out\n  export const logoutUser = () => dispatch => {\n    console.log(\"logoutaction\")\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\");\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to empty object {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n    // store.remove('loggedIn');\n  };\n\n"]},"metadata":{},"sourceType":"module"}