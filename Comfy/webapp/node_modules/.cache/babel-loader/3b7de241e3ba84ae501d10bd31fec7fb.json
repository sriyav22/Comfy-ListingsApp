{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shriya22/Desktop/Semester3/Web Design/Project/final-project-incredibles/webapp/src/App/Components/Listings/Listings.js\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport FooterComponent from '../Footer/footer';\nimport NavbarComponent from '../Navbar/navbar';\nimport Card from './Card';\nimport { fetchListings } from \"../../Store/actions/listingActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../Store/actions/authActions\";\nimport Listings from '../../../../../listingsapp/src/App/Components/Listings/Listings';\n\nclass BrowseComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filteredCity: ''\n    };\n  }\n\n  //This function is called on load and fetches all the listings in the db. Also as part of the url we are passing filteredCity \n  //and if the url contains the filteredCity then the state filteredCity gets assigned with the value passed in the url\n  componentDidMount() {\n    this.props.fetchListings();\n\n    if (this.props.match) {\n      const {\n        filteredCity\n      } = this.props.match.params;\n      this.setState({\n        filteredCity: filteredCity\n      });\n    }\n  } // This function is called everytime there is some update in the component. In this case, if the user object's length \n  // is 0 then homepage componet is called.\n\n\n  componentDidUpdate() {\n    console.log(this.props.auth);\n\n    if (Object.keys(this.props.auth.user).length === 0) {\n      window.location.href = \"/\";\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavbarComponent, {\n        history: this.props.history\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [!this.state.filteredCity && this.props.listings && this.props.listings.map((room, index) => /*#__PURE__*/_jsxDEV(Card, {\n            room: room\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 45\n          }, this)), this.state.filteredCity && this.props.listings && this.props.listings.map((room, index) => {\n            if (room.address.city === this.state.filteredCity) {\n              return /*#__PURE__*/_jsxDEV(Card, {\n                room: room\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 53\n              }, this);\n            }\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(FooterComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }, this);\n  }\n\n}\n\nBrowseComponent.propTypes = {\n  fetchListings: PropTypes.func.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  listings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  listings: state.listings\n});\n\nexport default connect(mapStateToProps, {\n  fetchListings,\n  logoutUser\n})(BrowseComponent); // Roomlistings.propTypes = {\n//     logoutUser: PropTypes.func.isRequired,\n//     createListing: PropTypes.func.isRequired,\n//     auth: PropTypes.object.isRequired\n//   };\n//   const mapStateToProps = state => ({\n//     listingData: state.Addnewroom,\n//     auth: state.auth\n//   });\n//   export default connect(\n//     mapStateToProps,\n//     {createListing,logoutUser}\n//   )(Roomlistings);","map":{"version":3,"sources":["/Users/shriya22/Desktop/Semester3/Web Design/Project/final-project-incredibles/webapp/src/App/Components/Listings/Listings.js"],"names":["React","useSelector","FooterComponent","NavbarComponent","Card","fetchListings","PropTypes","connect","logoutUser","Listings","BrowseComponent","Component","state","filteredCity","componentDidMount","props","match","params","setState","componentDidUpdate","console","log","auth","Object","keys","user","length","window","location","href","render","history","listings","map","room","index","address","city","propTypes","func","isRequired","object","mapStateToProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,iCAA3B;AACA,OAAOC,QAAP,MAAqB,iEAArB;;AACQ,MAAMC,eAAN,SAA8BV,KAAK,CAACW,SAApC,CAA8C;AAAA;AAAA;AAAA,SAG1CC,KAH0C,GAGlC;AACJC,MAAAA,YAAY,EAAE;AADV,KAHkC;AAAA;;AAO1C;AACA;AACAC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWV,aAAX;;AACA,QAAG,KAAKU,KAAL,CAAWC,KAAd,EAAoB;AAChB,YAAM;AAAEH,QAAAA;AAAF,UAAmB,KAAKE,KAAL,CAAWC,KAAX,CAAiBC,MAA1C;AACA,WAAKC,QAAL,CAAc;AACVL,QAAAA,YAAY,EAAEA;AADJ,OAAd;AAGH;AACF,GAjBuC,CAmBxC;AACA;;;AACAM,EAAAA,kBAAkB,GAAE;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWO,IAAvB;;AACA,QAAGC,MAAM,CAACC,IAAP,CAAY,KAAKT,KAAL,CAAWO,IAAX,CAAgBG,IAA5B,EAAkCC,MAAlC,KAA6C,CAAhD,EAAkD;AAC9CC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;AACJ;;AAEHC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BAEI,QAAC,eAAD;AAAiB,QAAA,OAAO,EAAE,KAAKf,KAAL,CAAWgB;AAArC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAK,QAAA,SAAS,EAAG,gBAAjB;AAAA,+BAGI;AAAK,UAAA,SAAS,EAAG,KAAjB;AAAA,qBAKK,CAAC,KAAKnB,KAAL,CAAWC,YAAZ,IACG,KAAKE,KAAL,CAAWiB,QADd,IAEO,KAAKjB,KAAL,CAAWiB,QAAX,CAAoBC,GAApB,CAAwB,CAACC,IAAD,EAAQC,KAAR,kBACpB,QAAC,IAAD;AAAM,YAAA,IAAI,EAAID;AAAd;AAAA;AAAA;AAAA;AAAA,kBADJ,CAPZ,EAWK,KAAKtB,KAAL,CAAWC,YAAX,IACG,KAAKE,KAAL,CAAWiB,QADd,IAEG,KAAKjB,KAAL,CAAWiB,QAAX,CAAoBC,GAApB,CAAwB,CAACC,IAAD,EAAQC,KAAR,KAAkB;AACtC,gBAAGD,IAAI,CAACE,OAAL,CAAaC,IAAb,KAAsB,KAAKzB,KAAL,CAAWC,YAApC,EAAkD;AAC9C,kCAAQ,QAAC,IAAD;AAAM,gBAAA,IAAI,EAAIqB;AAAd;AAAA;AAAA;AAAA;AAAA,sBAAR;AACH;AACR,WAJG,CAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,cAHJ,eA0BI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA8BH;;AA3DyC;;AA8D9CxB,eAAe,CAAC4B,SAAhB,GAA4B;AACxBjC,EAAAA,aAAa,EAAEC,SAAS,CAACiC,IAAV,CAAeC,UADN;AAExBhC,EAAAA,UAAU,EAAEF,SAAS,CAACiC,IAAV,CAAeC,UAFH;AAGxBlB,EAAAA,IAAI,EAAEhB,SAAS,CAACmC,MAAV,CAAiBD,UAHC;AAIxBR,EAAAA,QAAQ,EAAG1B,SAAS,CAACmC,MAAV,CAAiBD;AAJJ,CAA5B;;AAOA,MAAME,eAAe,GAAG9B,KAAK,KAAK;AAC9BU,EAAAA,IAAI,EAAEV,KAAK,CAACU,IADkB;AAE9BU,EAAAA,QAAQ,EAAGpB,KAAK,CAACoB;AAFa,CAAL,CAA7B;;AAIA,eAAezB,OAAO,CAClBmC,eADkB,EAElB;AAAErC,EAAAA,aAAF;AAAkBG,EAAAA;AAAlB,CAFkB,CAAP,CAGbE,eAHa,CAAf,C,CAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\n\n\nimport FooterComponent from '../Footer/footer'\nimport NavbarComponent from '../Navbar/navbar';\nimport Card from './Card';\nimport { fetchListings } from \"../../Store/actions/listingActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../Store/actions/authActions\";\nimport Listings from '../../../../../listingsapp/src/App/Components/Listings/Listings'\n        class BrowseComponent extends React.Component {\n\n            //Assigning state to filteredCity\n            state = {\n                filteredCity: '',\n            }\n            \n            //This function is called on load and fetches all the listings in the db. Also as part of the url we are passing filteredCity \n            //and if the url contains the filteredCity then the state filteredCity gets assigned with the value passed in the url\n            componentDidMount() {\n                this.props.fetchListings() \n                if(this.props.match){\n                    const { filteredCity } = this.props.match.params\n                    this.setState({\n                        filteredCity: filteredCity\n                    })\n                }               \n              }\n\n              // This function is called everytime there is some update in the component. In this case, if the user object's length \n              // is 0 then homepage componet is called.\n              componentDidUpdate(){\n                  console.log(this.props.auth)\n                  if(Object.keys(this.props.auth.user).length === 0){\n                      window.location.href = \"/\"\n                  }\n              }\n              \n            render() {\n                return(\n                    <div>\n                        {/* The navbar component is called */}\n                        <NavbarComponent history={this.props.history}/>\n                        <div className = \"container mt-5\">\n\n                            {/* Aligning the data in the screen in a grid format */}\n                            <div className = \"row\">\n\n                                {/* This section of code is called when the user clicks on Browse Rooms from the homepage. Here,\n                                the block of code is called even if the state of filtered city is not set, provided there are Listings\n                                and then each listing is mapped to the room object and id to index. */}\n                                {!this.state.filteredCity && \n                                    this.props.listings && \n                                        this.props.listings.map((room , index) => (\n                                            <Card room = {room} />\n                                ))}\n\n                                {this.state.filteredCity && \n                                    this.props.listings && \n                                    this.props.listings.map((room , index) => {\n                                        if(room.address.city === this.state.filteredCity) {\n                                            return (<Card room = {room} />)\n                                        }    \n                                })}    \n                            </div>\n                        </div>\n                        <FooterComponent />\n                    </div>          \n                );\n            }\n        }                                                                        \n\n        BrowseComponent.propTypes = {\n            fetchListings: PropTypes.func.isRequired,\n            logoutUser: PropTypes.func.isRequired,\n            auth: PropTypes.object.isRequired,\n            listings : PropTypes.object.isRequired,\n            \n        };\n        const mapStateToProps = state => ({\n            auth: state.auth,\n            listings : state.listings\n        });\n        export default connect(\n            mapStateToProps,\n            { fetchListings , logoutUser}\n        )(BrowseComponent);\n\n        // Roomlistings.propTypes = {\n        //     logoutUser: PropTypes.func.isRequired,\n        //     createListing: PropTypes.func.isRequired,\n        //     auth: PropTypes.object.isRequired\n        //   };\n          \n          \n        //   const mapStateToProps = state => ({\n        //     listingData: state.Addnewroom,\n        //     auth: state.auth\n        //   });\n        //   export default connect(\n        //     mapStateToProps,\n          \n        //     {createListing,logoutUser}\n        //   )(Roomlistings);\n\n"]},"metadata":{},"sourceType":"module"}